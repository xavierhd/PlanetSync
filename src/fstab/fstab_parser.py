
from os.path import expanduser, dirname, abspath

import uuid
import re  # regex utility
from copy import copy

from utils.file_reader import read, readLine, dump
from fstab.fstab_entry import build_fstab_entry
from utils.stacktrace_helper import full_stack


class FstabParser:
    """
    Low level interface with the fstab file, the fstab backend
    """

    def __init__(self, path):
        self.path = path
        self.next_action = LineAction.ADD_TO_HEAD
        self.saved_key = None
        self.head = []
        self.entries = {}
        self.tail = []
         # Template of the autogenerated section
        template_directory = dirname(abspath(__file__)) + "/Template"
        self.head_template = read(template_directory + "/head.template")
        self.entry_template = read(template_directory + "/entry.template")
        self.tail_template = read(template_directory + "/tail.template")
        self.parse_sections()

    def get_key(self, line):
        """
        Parse the line to obtain the key (name) of the fstab entry
        :param line: The line to parse
        :return: The key which should contain the fstab entry
        """
        key = None
        regex = "##"
        if line:
            line = line[:len(line)-1]
            split = re.split(regex, line)
            if len(split) >= 2:
                key = split[1]
        return key

    def parse_sections(self):
        """
        Parse the fstab into 3 sections: preAutogen, autogen and afterAutogen
        :return: the autogenerated section of the fstab file
        """
        fstab_lines = readLine(self.path)
        for line in fstab_lines:
            action = self.get_action_for_line(line)
            if action == LineAction.ADD_TO_HEAD:
                self.head.append(line)
            elif action == LineAction.ADD_TO_AUTOGEN:
                self.add_to_autogen(line)
            elif action == LineAction.ADD_TO_TAIL:
                self.tail.append(line)

    def add_to_autogen(self, line):
        """
        Read the line to be added as a key(title) or value.
        :param line: (str) The line itself to add from the fstab file.
        """
        if len(line) > 0:
            key = self.get_key(line)
            if key:
                self.saved_key = self.get_key(line)
            else:
                if not self.saved_key:
                    self.saved_key = "No name - " + uuid.uuid4().hex
                # We link the key to the line
                try:
                    self.entries[self.saved_key] = build_fstab_entry(line)
                except:
                    print('Error while building the entry for line: {line}\n{error}'.format(line=line, error=full_stack()))
                self.saved_key = None

    def commit(self):
        """
        Save the content of the currentData to the fstab file
        """
        fstabContent = self.rebuild_fstab()
        dump(self.path, fstabContent)

    def make_autogen_section(self):
        """
        Build the fstab autogen section
        """
        content = self.head_template
        for entry_name in self.entries:
            entry_line = self.entries[entry_name].to_line()
            content += self.entry_template.format(entry_name=entry_name, entry=entry_line)
        content += self.tail_template
        return content

    def rebuild_fstab(self):
        """
        Concatenate the 3 fstab parts together
        :return: the entire fstab file in a string
        """
        fstab = ""
        for line in self.head:
            fstab += line
        fstab += self.make_autogen_section()
        for line in self.tail:
            fstab += line
        return fstab

    def get_action_for_line(self, line):
        """
        Check if the line is inside the autogen section and return the action to do with the line
        """
        action = self.next_action
        # If the current line equal to the head -> we enter the autogen
        if line == self.head_template:
            self.next_action = LineAction.ADD_TO_AUTOGEN
            action = LineAction.DROP
        # If the current line equal to the tail -> we exit the autogen
        elif line == self.tail_template:
            self.next_action = LineAction.ADD_TO_TAIL
            action = LineAction.DROP
        return action

class LineAction:
    ADD_TO_HEAD = 0
    ADD_TO_AUTOGEN = 1
    ADD_TO_TAIL = 2
    DROP = 3