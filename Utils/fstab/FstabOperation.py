from os.path import expanduser

from Utils.FileReader import read


class Operation(object):
    """
    Low level interface with the fstab file
    """

    inAutoGen = False
    currentData = {}
    FSTAB_FILE = expanduser("~")+"/test_fstab"
    headTemplate = None
    entryTemplate = None
    tailTemplate = None

    def __init__(self):
        try:
            self.headTemplate = read("Template/head.Template")
            self.entryTemplate = read("Template/entry.Template")
            self.tailTemplate = read("Template/tail.Template")
        except Exception as e:
            raise e

    def getKey(self, line):
        key = None
        regex = "##->"
        if line:
            split = re.split(regex, line)
            if split.lenght >= 2:
                key = split[1]
        return key

    def getAutogenSection(self):
        """
        :return: the autogenerated section of the fstab file
        """
        autogenSection = {}
        fstab = read(self.FSTAB_FILE)
        key = None

        if fstab:
            for line in fstab:
                if line:
                    if self.isAutoGenSection(line):
                        if not key:
                            key = self.getKey(line)
                        else:
                            autogenSection[key] = line
                            key = None
        return autogenSection

    def makeAutogenSection(self, autogenDict):
        """
        Build the fstab autogen section
        :param autogenDict: The data that the fstab file must contain
        """
        autogenString = self.headTemplate
        lineFeed = "\n"
        for key, value in autogenDict.iteritems():
            autogenString += self.entryTemplate.format(key) + lineFeed

    def isAutoGenSection(self, line):
        """
        Check if the line is inside the autogen section
        """
        result = False

        if not self.inAutoGen:
            if self.isHead(line):
                result = True
        else:
            if not self.isTail(line):
                result = True

        return result

    def isHead(self, line):
        """
        Check if the line is the head of the autogen section
        """
        result = False
        if line == self.headTemplate:
            self.inAutoGen = True
            result = True
        return result

    def isTail(self, line):
        """
        Check if the line is the tail of the autogen section
        """
        result = False
        if line == self.tailTemplate:
            self.inAutoGen = False
            result = True
        return result
